def initialize_board():
    board = [[' ' for _ in range(3)] for _ in range(3)]
    return board

def print_board(board):
    for row in board:
        print(' | '.join(row))
        print('---------')

def is_valid_move(board, row, col):
    if row < 0 or row >= len(board) or col < 0 or col >= len(board[0]):
        return False
    if board[row][col] != ' ':
        return False
    return True

def make_move(board, row, col, symbol):
    board[row][col] = symbol

def check_winner(board):
    # Check rows
    for row in board:
        if row[0] == row[1] == row[2] != ' ':
            return row[0]

    # Check columns
    for col in range(3):
        if board[0][col] == board[1][col] == board[2][col] != ' ':
            return board[0][col]

    # Check diagonals
    if board[0][0] == board[1][1] == board[2][2] != ' ':
        return board[0][0]
    if board[0][2] == board[1][1] == board[2][0] != ' ':
        return board[0][2]

    # No winner
    return None

def is_board_full(board):
    for row in board:
        if ' ' in row:
            return False
    return True

def play_tic_tac_toe():
    board = initialize_board()
    current_symbol = 'X'

    while True:
        print_board(board)
        print(f"Player {current_symbol}'s turn.")
        row = int(input("Enter row (0-2): "))
        col = int(input("Enter column (0-2): "))

        if is_valid_move(board, row, col):
            make_move(board, row, col, current_symbol)
            winner = check_winner(board)
            if winner:
                print(f"Player {winner} wins!")
                break
            elif is_board_full(board):
                print("It's a tie!")
                break
            else:
                current_symbol = 'O' if current_symbol == 'X' else 'X'
        else:
            print("Invalid move. Try again.")

play_tic_tac_toe()
